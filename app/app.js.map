{"version":3,"sources":["app.module.js","core.module.js","account/account.module.js","home/home.module.js","hosts/hosts.module.js","layout/layout.module.js","room/room.module.js","spots/spots.module.js","tickets/tickets.module.js","account/account.controller.js","account/account.route.js","core/account.service.js","core/auth.service.js","core/background.directive.js","core/cache.service.js","core/config.service.js","core/contact.service.js","core/core.route.js","core/core.run.js","core/data.service.js","core/file-upload.directive.js","core/language.service.js","core/login-buttons.directive.js","core/notification.service.js","core/photo-test.service.js","core/photo.service.js","core/room-test.service.js","core/room.service.js","core/spot.service.js","core/ticket.service.js","core/transaction.service.js","core/user-id.service.js","core/user-test.service.js","core/user.service.js","core/utility.service.js","home/home.controller.js","home/home.route.js","home/register-spot.controller.js","hosts/accept.controller.js","hosts/contact.controller.js","hosts/hosts.controller.js","hosts/hosts.route.js","layout/header.directive.js","room/chat.directive.js","room/room.controller.js","room/room.route.js","spots/spots.controller.js","spots/spots.route.js","tickets/tickets-add.controller.js","tickets/tickets.controller.js","tickets/tickets.route.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACflCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnlEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrlBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('app', [\n    'ngAnimate',\n    'ngTouch',\n    'ngCookies',\n    'angular-carousel',\n    'ui.router',\n    'ui.bootstrap',\n    'uiGmapgoogle-maps',\n    'toastr',\n    'ui.calendar',\n    'firebase',\n    'pascalprecht.translate',\n    'ngFileUpload',\n    'app.layout',\n    'app.home',\n    'app.spots',\n    'app.room',\n    'app.tickets',\n    'app.account',\n    'app.hosts',\n    'app.core'\n  ]);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core', []).config(config);\n\n  config.$inject = ['$translateProvider'];\n\n  function config($translateProvider) {\n    $translateProvider.useStaticFilesLoader({\n      prefix: 'app/i18n/',\n      suffix: '.json'\n    });\n    $translateProvider.uniformLanguageTag('bcp47').determinePreferredLanguage();\n  \t// $translateProvider.preferredLanguage('ja');\n  \t// $translateProvider.fallbackLanguage('en');\n  \t$translateProvider.useMissingTranslationHandlerLog();\n  \t$translateProvider.useLocalStorage();\n  \t$translateProvider.useSanitizeValueStrategy('escaped');\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.account', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.home', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.hosts', []);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.layout', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.spots', []).config(config);\n\n  config.$inject = ['uiGmapGoogleMapApiProvider'];\n\n  function config(uiGmapGoogleMapApiProvider) {\n    uiGmapGoogleMapApiProvider.configure({\n      key: 'AIzaSyDLH67jWiu3QywVikRZuznyHPTM-d8dWsc',\n      v: '3.20',\n      libraries: 'places'\n    });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.tickets', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('AccountController', AccountController);\n\n  AccountController.$inject = ['currentAuth', 'toastr', 'user'];\n\n  function AccountController(currentAuth, toastr, user) {\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.update = update;\n\n    activate();\n\n    function activate() {\n      getUserData();\n    }\n\n    function getUserData() {\n      user.get(currentAuth.uid).$loaded().then(function (userData) {\n        var birthDay;\n        if (!_.isNull(userData.birth)) {\n          birthDay = moment(userData.birth)._d;\n        }\n        vm.name = userData.name || '';\n        vm.fullName = userData.fullName || '';\n        vm.email = userData.email || '';\n        vm.gender = userData.gender || '';\n        vm.languages = userData.languages || '';\n        vm.birth = birthDay || '';\n        vm.job = userData.job || '';\n        vm.residence = userData.residence || '';\n        vm.languageCollection = _.keys(vm.languages);\n        vm.messages = userData.messages || '';\n      });\n    }\n\n    function update() {\n      var birthTime = new Date(vm.birth).getTime();\n      var birthDay = moment(birthTime).format('YYYY-MM-DD');\n      var key = currentAuth.uid;\n      var updateData = {\n        name: vm.name,\n        fullName: vm.fullName,\n        email: vm.email,\n        gender: vm.gender,\n        languages: vm.languages,\n        birth: birthDay,\n        job: vm.job,\n        residence: vm.residence,\n        messages: vm.messages,\n        imageUrl: currentAuth.facebook.profileImageURL\n      };\n      user.save(key, updateData).then(function (ref) {\n        toastr.success('Update Success!');\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.account').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('account', {\n        url: '/account',\n        controller: 'AccountController',\n        controllerAs: 'account',\n        templateUrl: 'app/account/account.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(true);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('account', account);\n\n  account.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function account($firebaseArray, $firebaseObject, config) {\n\n    return new Account();\n\n    function Account() {\n      var ref = new Firebase(config.serverUrl + 'accounts');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var accountRef = ref.child(id);\n          return $firebaseObject(accountRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newAccountRef = ref.child(key);\n          var newAccount = $firebaseObject(newAccountRef);\n          newAccount = angular.merge(newAccount, data);\n          return newAccount.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('auth', auth);\n\n  auth.$inject = ['$cookies', '$firebaseAuth', '$q', '$rootScope', 'account', 'cache', 'config', 'data', 'User', 'user', 'userId'];\n\n  function auth($cookies, $firebaseAuth, $q, $rootScope, account, cache, config, data, User, user, userId) {\n\n    var _isInitialized = false;\n    var _newAuth = {};\n    var _newUser = {};\n    var _defferd;\n\n    var firebaseRef = new Firebase(config.serverUrl);\n    var firebase = $firebaseAuth(firebaseRef);\n    return new Auth();\n\n    function Auth() {\n      return {\n        firebase: firebase,\n        check: check,\n        login: login,\n        logout: logout\n      };\n    }\n\n    function check(required) {\n      if (_isInitialized) {\n        return required ? firebase.$requireAuth() : firebase.$waitForAuth();\n      }\n      _isInitialized = true;\n      return required ? firebase.$requireAuth().then(checkSuccess) : firebase.$waitForAuth().then(checkSuccess);\n    }\n\n    function checkSuccess(authData) {\n      _defferd = $q.defer();\n      if (_.isNull(authData)) {\n        _isInitialized = false;\n        _defferd.resolve();\n        return _defferd.promise;\n      }\n      data.me = new User(authData.uid);\n      user.get(authData.uid).$loaded().then(function (me) {\n        $rootScope.me = me;\n        angular.merge($rootScope, {\n          statuses: {\n            userId: authData.uid,\n            userName: user.name\n          }\n        });\n        return _defferd.resolve(authData);\n      });\n      return _defferd.promise;\n    }\n\n    function login() {\n      _defferd = $q.defer();\n      if (cache.has()) {\n        fbLoginWithToken();\n      } else {\n        fbLogin();\n      }\n      return _defferd.promise;\n    }\n\n    function fbLogin() {\n      var scope = ['public_profile', 'email'];\n      return firebase.$authWithOAuthPopup('facebook', {\n        scope: scope.join()\n      }).then(fbLoginSuccess).catch(authenticationFailed);\n    }\n\n    function fbLoginWithToken() {\n      return firebase\n        .$authWithOAuthToken('facebook', cache.get())\n        .then(fbLoginSuccess)\n        .catch(authenticationFailed);\n    }\n\n    function fbLoginSuccess(authData) {\n      _newAuth = authData;\n      cache.put(_newAuth.facebook.accessToken);\n      return account.save(_newAuth.uid, _newAuth).then(accountSaveSuccess, authenticationFailed);\n    }\n\n    function accountSaveSuccess(ref) {\n      return user.exists(_newAuth.uid).then(userExistsSuccess, userExistsFailed);\n    }\n\n    function userExistsSuccess(userData) {\n      angular.merge($rootScope, {\n        statuses: {\n          userId: _newAuth.uid,\n          userName: userData.name\n        }\n      });\n      return _defferd.resolve(userData);\n    }\n\n    function userExistsFailed() {\n      _newUser.name = _newAuth.facebook.email ? _newAuth.facebook.email.split('@')[0] : null;\n      _newUser.fullName = _newAuth.facebook.displayName || null;\n      _newUser.email = _newAuth.facebook.email || null;\n      _newUser.gender = _newAuth.facebook.cachedUserProfile.gender || null;\n      _newUser.imageUrl = _newAuth.facebook.profileImageURL || null;\n      return user.save(_newAuth.uid, _newUser).then(userSaveSuccess, authenticationFailed);\n    }\n\n    function userSaveSuccess(ref) {\n      return userId.save(_newUser.name, _newAuth.uid).then(userIdSaveSuccess, authenticationFailed);\n    }\n\n    function userIdSaveSuccess(ref) {\n      return _defferd.resolve();\n    }\n\n    function authenticationFailed() {\n      return _defferd.reject();\n    }\n\n    function logout() {\n      firebase.$unauth();\n      return $cookies.remove('bandally');\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('background', background);\n\n  background.$inject = [];\n\n  function background() {\n    return {\n      templateUrl: 'app/core/background.html',\n      scope: {\n        backgroundImages: '='\n      },\n      controller: BackgroundController,\n      controllerAs: 'background',\n      bindToController: true\n    };\n  }\n\n  BackgroundController.$inject = ['$interval', '$scope'];\n\n  function BackgroundController($interval, $scope) {\n\n    var vm = this;\n    vm.activeBg = 0;\n\n    activate();\n\n    function activate() {\n      $scope.$watch('background.backgroundImages', function (value) {\n        if (_.isUndefined(value)) return;\n        startBgCarousel();\n      });\n    }\n\n    function startBgCarousel() {\n      $interval(function () {\n        if (vm.activeBg === vm.backgroundImages.length - 1) {\n          vm.activeBg = 0;\n          return;\n        }\n        return vm.activeBg++;\n      }, 6000);\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('cache', cache);\n\n  cache.$inject = ['$cookies'];\n\n  function cache($cookies) {\n\n    var _name = 'bandally';\n    var _expires = new Date(1000 * 60 * 60 * 24 * 365 * 10 + (new Date()).getTime());\n\n    return new Cache();\n\n    function Cache() {\n      return {\n        has: has,\n        get: get,\n        put: put\n      };\n    }\n\n    function has() {\n      var data = $cookies.get(_name);\n      return !_.isUndefined(data);\n    }\n\n    function get() {\n      var data = $cookies.get(_name);\n      return data || false;\n    }\n\n    function put(data) {\n      if (!data) {\n        return false;\n      }\n      $cookies.put(_name, data, {\n        expires: _expires\n      });\n      return data;\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('config', config);\n\n  config.$inject = [];\n\n  function config() {\n    var Config = function () {\n      return {\n        'serverUrl': 'https://bandally.firebaseio.com/',\n        'authApiUrl': 'http://localhost:4000'\n      };\n    };\n    return new Config();\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('contact', contact);\n\n  contact.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function contact($firebaseArray, $firebaseObject, config) {\n\n    return new Contact();\n\n    function Contact() {\n      var ref = new Firebase(config.serverUrl + 'contacts');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newContactRef = ref.child(key);\n          var newContact = $firebaseObject(newContactRef);\n          newContact = angular.merge(newContact, data);\n          return newContact.$save();\n        },\n        remove: function (key) {\n          var contactRef = ref.child(key);\n          return $firebaseObject(contactRef).$remove();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').config(route);\n\n  route.$inject = ['$urlRouterProvider'];\n\n  function route($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/');\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').run(run);\n\n  run.$inject = ['$cookies', '$rootScope', '$state', 'auth', 'cache', 'toastr', 'User'];\n\n  function run($cookies, $rootScope, $state, auth, cache, toastr, User) {\n\n    $rootScope.me = {};\n\n    // 該当ページのスラッグをbodyのclassに入れるため\n    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, error) {\n      angular.merge($rootScope, {\n        statuses: {\n          pageName: toState.controllerAs\n        }\n      });\n    });\n\n    // 未ログインのままログインが必要なページに遷移した場合の処理\n    $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {\n      console.log(error);\n      if (error === 'AUTH_REQUIRED') {\n        toastr.warning('You require sign in!', 'Warning');\n        return $state.go('spots');\n      }\n    });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('data', data);\n\n  data.$inject = [];\n\n  function data() {\n    return {\n      me: {}\n    };\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('fileUpload', fileUpload);\n\n  fileUpload.$inject = [];\n\n  function fileUpload() {\n    return {\n      templateUrl: 'app/core/file-upload.html',\n      scope: {},\n      controller: FileUploadController,\n      controllerAs: 'fileUpload',\n      bindToController: true\n    };\n  }\n\n  FileUploadController.$inject = ['$rootScope', 'data', 'Photo', 'toastr', 'Upload', 'user'];\n\n  function FileUploadController($rootScope, data, Photo, toastr, Upload, user) {\n\n    var _photoData = {};\n\n    var vm = this;\n    vm.picFile = null;\n    vm.uploadPic = uploadPic;\n\n    function uploadPic(file) {\n      if (_.isNull(file)) {\n        return toastr.warning('Image is not selected.');\n      }\n      return encode(file);\n    }\n\n    function encode(file) {\n      return Upload.base64DataUrl(file).then(uplodeEncodedImage);\n    }\n\n    function uplodeEncodedImage(base64Image) {\n      _photoData = {\n        data: base64Image,\n      };\n      return new Photo(data.me.$id).$add(_photoData).then(function (ref) {\n        vm.picFile = null;\n        return toastr.success('Upload Success!');\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('language', language);\n\n  language.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function language($firebaseArray, $firebaseObject, config) {\n\n    return new Language();\n\n    function Language() {\n      var ref = new Firebase(config.serverUrl + 'languages');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (data) {\n          var newLanguageRef = ref.child(data.name);\n          var newLanguage = $firebaseObject(newLanguageRef);\n          newLanguage = angular.merge(newLanguage, data);\n          return newLanguage.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('loginButtons', loginButtons);\n\n  loginButtons.$inject = [];\n\n  function loginButtons() {\n    return {\n      templateUrl: 'app/core/login-buttons.html',\n      scope: {},\n      controller: LoginButtonsController,\n      controllerAs: 'loginButtons',\n      bindToController: true\n    };\n  }\n\n  LoginButtonsController.$inject = ['$cookies', '$rootScope', '$state', 'account', 'auth', 'toastr', 'user'];\n\n  function LoginButtonsController($cookies, $rootScope, $state, account, auth, toastr, user) {\n\n    var vm = this;\n    vm.fbLogin = fbLogin;\n\n    activate();\n\n    function activate() {}\n\n    function fbLogin() {\n      return auth.login().then(fbLoginSuccess, fbLoginFailed);\n    }\n\n    function fbLoginSuccess() {\n      return $state.go('home');\n    }\n\n    function fbLoginFailed() {\n      toastr.error('Authentication failed.', 'Error');\n      return $state.go('spots');\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('notification', notification);\n\n  notification.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function notification($firebaseArray, $firebaseObject, config) {\n\n    return new Notification();\n\n    function Notification() {\n      var ref = new Firebase(config.serverUrl + 'notifications');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (userName, data) {\n          var userRef = ref.child(userName);\n          return $firebaseArray(userRef).$add(data);\n        },\n        save: function (key, data) {\n          var newNotificationRef = ref.child(key);\n          var newNotification = $firebaseObject(newNotificationRef);\n          newNotification = angular.merge(newNotification, data);\n          return newNotification.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core')\n    .factory('PhotoFactory', PhotoFactory)\n    .factory('Photo', Photo);\n\n  PhotoFactory.$inject = ['$firebaseArray', '$q', 'config', 'Transaction'];\n\n  function PhotoFactory($firebaseArray, $q, config, Transaction) {\n\n    return $firebaseArray;\n  }\n\n  Photo.$inject = ['config', 'PhotoFactory'];\n\n  function Photo(config, PhotoFactory) {\n    var ref = new Firebase(config.serverUrl + 'photos');\n    return function (userId) {\n      return new PhotoFactory(ref.child(userId));\n    };\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('photo', photo);\n\n  photo.$inject = ['$firebaseArray', '$firebaseObject', 'config', 'user'];\n\n  function photo($firebaseArray, $firebaseObject, config, user) {\n\n    return new Photo();\n\n    function Photo() {\n      var ref = new Firebase(config.serverUrl + 'photos');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var photoRef = ref.child(id);\n          return $firebaseObject(photoRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (data) {\n          var newPhotoRef = ref.child(data.uid);\n          var newPhoto = $firebaseObject(newPhotoRef);\n          newPhoto = angular.merge(newPhoto, data);\n          return newPhoto.$save();\n        },\n        remove: function (id) {\n          var photoRef = ref.child(id);\n          var photo = $firebaseObject(photoRef);\n          return photo.$remove();\n        },\n        upload: function (data) {\n          ref.transaction(function (currentData) {\n            return $firebaseArray(ref).$add(data).then(function (photoRef) {\n              return user.addPhoto(photoRef.key()).then(function (userRef) {\n                return userRef;\n              });\n            });\n          }, function (error, committed, snapshot) {\n            if (error) {\n              return console.log('Transaction failed abnormally!', error);\n            }\n            if (!committed) {\n              return console.log('We aborted the transaction.');\n            }\n            console.log(snapshot);\n            return snapshot;\n          });\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core')\n    .factory('RoomFactory', RoomFactory)\n    .factory('Room', Room);\n\n  RoomFactory.$inject = ['$firebaseArray', '$firebaseObject', '$q', 'config', 'Transaction'];\n\n  function RoomFactory($firebaseArray, $firebaseObject, $q, config, Transaction) {\n\n    var _room;\n\n    return $firebaseObject.$extend({\n      $$updated: function (snapshot) {\n        var changed = $firebaseObject.prototype.$$updated.apply(this, arguments);\n        _room = this;\n        return changed;\n      }\n    });\n\n    function removePhoto(photoId) {\n      var deferred = $q.defer();\n      var updateData = {};\n      var updateKey1 = 'users/' + _user.$id + '/photos/' + photoId;\n      var updateKey2 = 'photos/' + photoId;\n      var updateKey3 = 'spots/' + photoId;\n      updateData[updateKey1] = null;\n      updateData[updateKey2] = null;\n      updateData[updateKey3] = null;\n      Transaction.save(updateData).then(\n        function (ref) {\n          return deferred.resolve(ref);\n        },\n        function (error) {\n          return deferred.reject(error);\n        }\n      );\n      return deferred.promise;\n    }\n  }\n\n  Room.$inject = ['config', 'RoomFactory'];\n\n  function Room(config, RoomFactory) {\n    var ref = new Firebase(config.serverUrl + 'rooms');\n    return function (roomId) {\n      return new RoomFactory(ref.child(roomId));\n    };\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('room', room);\n\n  room.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function room($firebaseArray, $firebaseObject, config) {\n\n    return new Room();\n\n    function Room() {\n      var ref = new Firebase(config.serverUrl + 'rooms');\n      return {\n        getNewRef: function () {\n          return ref.push();\n        },\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        getMessages: function (roomId) {\n          var messagesRef = ref.child(roomId).child('messages');\n          return $firebaseArray(messagesRef);\n        },\n        postMessage: function (roomId, data) {\n          var messagesRef = ref.child(roomId).child('messages');\n          return $firebaseArray(messagesRef).$add(data);\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('spot', spot);\n\n  spot.$inject = ['$firebaseArray', '$firebaseObject', '$q', 'config'];\n\n  function spot($firebaseArray, $firebaseObject, $q, config) {\n\n    return new Spot();\n\n    function Spot() {\n      var ref = new Firebase(config.serverUrl + 'spots');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var spotRef = ref.child(id);\n          return $firebaseObject(spotRef);\n        },\n        save: function (data) {\n          var newSpotRef = ref.child(data.uid);\n          var newSpot = $firebaseObject(newSpotRef);\n          newSpot = angular.merge(newSpot, data);\n          return newSpot.$save();\n        },\n        add: function (photoId, latlng) {\n          var geofire = new GeoFire(ref);\n          return geofire.set(photoId, latlng);\n        },\n        query: function (center, radius) {\n          var deferred = $q.defer();\n          var spots = [];\n          var geoFire = new GeoFire(ref);\n          var geoQuery = geoFire.query({\n            center: center,\n            radius: radius\n          });\n          geoQuery.on('key_entered', function (id, location, distance) {\n            spots.push({\n              id: id,\n              location: location,\n              distance: distance\n            });\n          });\n          geoQuery.on('ready', function () {\n            return deferred.resolve(spots);\n          });\n          return deferred.promise;\n        },\n        distance: function (locations) {\n          return GeoFire.distance(locations[0], locations[1]);\n        },\n        exists: function (photoId) {\n          var deferred = $q.defer();\n          ref.once('value', function (snapshot) {\n            if (snapshot.exists()) {\n              return deferred.resolve();\n            } else {\n              return deferred.reject();\n            }\n          });\n          return deferred.promise;\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('ticket', ticket);\n\n  ticket.$inject = ['$firebaseArray', 'config'];\n\n  function ticket($firebaseArray, config) {\n    var ref = new Firebase(config.serverUrl + 'tickets');\n    return $firebaseArray(ref);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('Transaction', Transaction);\n\n  Transaction.$inject = ['$firebaseArray', '$firebaseObject', '$q', 'config'];\n\n  function Transaction($firebaseArray, $firebaseObject, $q, config) {\n\n    var ref = new Firebase(config.serverUrl);\n\n    return new TransactionFactory();\n\n    function TransactionFactory() {\n      return {\n        save: save\n      };\n    }\n\n    function save(data) {\n      var deferred = $q.defer();\n      ref.update(data, function (error) {\n        if (error) {\n          return deferred.reject(error);\n        } else {\n          return deferred.resolve(ref);\n        }\n      });\n      return deferred.promise;\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('userId', userId);\n\n  userId.$inject = ['$firebaseArray', '$firebaseObject', '$rootScope', 'config'];\n\n  function userId($firebaseArray, $firebaseObject, $rootScope, config) {\n\n    return new UserId();\n\n    function UserId() {\n      var ref = new Firebase(config.serverUrl + 'userIds');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userIdRef = ref.child(id);\n          return $firebaseObject(userIdRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, value) {\n          var newUserIdRef = ref.child(key);\n          var newUserId = $firebaseObject(newUserIdRef);\n          newUserId.$value = value;\n          return newUserId.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core')\n    .factory('UserFactory', UserFactory)\n    .factory('User', User);\n\n  UserFactory.$inject = ['$firebaseArray', '$firebaseObject', '$q', 'config', 'Transaction'];\n\n  function UserFactory($firebaseArray, $firebaseObject, $q, config, Transaction) {\n\n    return $firebaseObject.$extend({\n      $$updated: function (snapshot) {\n        var changed = $firebaseObject.prototype.$$updated.apply(this, arguments);\n        getPhotos(this);\n        adjustMessages(this);\n        return changed;\n      },\n      getRooms: function () {\n        var user = this;\n        if (!_.has(user, 'rooms')) return;\n        var roomsRef = new Firebase(config.serverUrl + 'rooms');\n        var rooms = [];\n        angular.forEach(user.rooms, function (bool, roomId) {\n          rooms.push($firebaseObject(roomsRef.child(roomId)));\n        });\n        user.roomsData = rooms;\n      },\n      getFavorites: function () {\n        var user = this;\n        if (!_.has(user, 'favorites')) return;\n        var favoritesRef = new Firebase(config.serverUrl + 'users');\n        var favorites = [];\n        angular.forEach(user.favorites, function (bool, favoriteUserId) {\n          favorites.push($firebaseObject(favoritesRef.child(favoriteUserId)));\n        });\n        user.favoritesData = favorites;\n      },\n      getLanguages: function () {\n        var user = this;\n        var languagesRef = new Firebase(config.serverUrl + 'languages');\n        $firebaseArray(languagesRef).$loaded(function (languages) {\n          user.languagesData = _.filter(languages, function (language) {\n            return _.has(user.languages, language.$id);\n          });\n        });\n      },\n      removePhoto: function (photoId) {\n        var user = this;\n        var deferred = $q.defer();\n        var updateData = {};\n        var updateKey1 = 'photos/' + user.$id + '/' + photoId;\n        var updateKey2 = 'spots/' + user.$id + '::' + photoId;\n        updateData[updateKey1] = null;\n        updateData[updateKey2] = null;\n        Transaction.save(updateData).then(\n          function (ref) {\n            return deferred.resolve(ref);\n          },\n          function (error) {\n            return deferred.reject(error);\n          }\n        );\n        return deferred.promise;\n      },\n      releaseSpot: function (photoId) {\n        var user = this;\n        var deferred = $q.defer();\n        var updateData = {};\n        var updateKey1 = 'spots/' + user.$id + '::' + photoId;\n        updateData[updateKey1] = null;\n        Transaction.save(updateData).then(\n          function (ref) {\n            return deferred.resolve(ref);\n          },\n          function (error) {\n            return deferred.reject(error);\n          }\n        );\n        return deferred.promise;\n      }\n    });\n\n    function getPhotos(user) {\n      var photosRef = new Firebase(config.serverUrl + 'photos');\n      user.photos = $firebaseArray(photosRef.child(user.$id));\n    }\n\n    function adjustMessages(user) {\n      var userMessagesRef = new Firebase(config.serverUrl + 'users/' + user.$id + '/messages');\n      user.messages = $firebaseArray(userMessagesRef);\n    }\n  }\n\n  User.$inject = ['config', 'UserFactory'];\n\n  function User(config, UserFactory) {\n    var ref = new Firebase(config.serverUrl + 'users');\n    return function (userId) {\n      return new UserFactory(ref.child(userId));\n    };\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('user', user);\n\n  user.$inject = ['$firebaseArray', '$firebaseObject', '$q', '$rootScope', 'config', 'userId'];\n\n  function user($firebaseArray, $firebaseObject, $q, $rootScope, config, userId) {\n\n    return new User();\n\n    function User() {\n      var ref = new Firebase(config.serverUrl + 'users');\n      return {\n        setMe: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef).$loaded().then(function (me) {\n            _me = me;\n          });\n        },\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        getByName: function (name) {\n          var deferred = $q.defer();\n          userId.get(name).$loaded().then(function (userId) {\n            var userRef = ref.child(userId.$value);\n            return deferred.resolve($firebaseObject(userRef).$loaded());\n          });\n          return deferred.promise;\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var deferred = $q.defer();\n          var saveUserRef = ref.child(key);\n          $firebaseObject(saveUserRef).$loaded().then(\n            function (saveUser) {\n              return angular.merge(saveUser, data).$save().then(\n                function (ref) {\n                  return deferred.resolve(ref);\n                },\n                function (error) {\n                  return deferred.reject(error);\n                }\n              );\n            },\n            function (error) {\n              return deferred.reject(error);\n            }\n          );\n          return deferred.promise;\n        },\n        exists: function (id) {\n          var deferred = $q.defer();\n          var userRef = ref.child(id);\n          $firebaseObject(userRef).$loaded().then(function (user) {\n            if (_.isNull(user.$value)) {\n              return deferred.reject();\n            }\n            return deferred.resolve(user);\n          });\n          return deferred.promise;\n        },\n        addPhoto: function (photoId) {\n          var photoRef = ref.child($rootScope.statuses.userId).child('photos').child(photoId);\n          var newPhoto = $firebaseObject(photoRef);\n          newPhoto.$value = true;\n          return newPhoto.$save();\n        },\n        removePhoto: function (photoId) {\n          var photoRef = ref.child($rootScope.statuses.userId).child('photos').child(photoId);\n          var photo = $firebaseObject(photoRef);\n          return photo.$remove();\n        },\n        addNotification: function (userName, data) {\n          var deferred = $q.defer();\n          userId.get(userName).$loaded().then(function (userId) {\n            var notificationRef = ref.child(userId.$value).child('notifications');\n            return $firebaseArray(notificationRef).$add(data).then(function (ref) {\n              return deferred.resolve(ref);\n            });\n          });\n          return deferred.promise;\n        },\n        addFavorite: function (favoriteUserId) {\n          var favoritesRef = ref.child($rootScope.statuses.userId).child('favorites').child(favoriteUserId);\n          var newFavorite = $firebaseObject(favoritesRef);\n          newFavorite.$value = true;\n          return newFavorite.$save();\n        },\n        addFavoritedCount: function (favoriteUserId) {\n          var deferred = $q.defer();\n          var favoritedCountRef = ref.child(favoriteUserId).child('favoritedCount');\n          var favoritedCount = $firebaseObject(favoritedCountRef);\n          favoritedCount.$loaded().then(function (favoritedCount) {\n            favoritedCount.$value = _.isUndefined(favoritedCount.$value) ? 1 : favoritedCount.$value + 1;\n            return deferred.resolve(favoritedCount.$save());\n          });\n          return deferred.promise;\n        },\n        removeFavorite: function (favoriteUserId) {\n          var favoriteRef = ref.child($rootScope.statuses.userId).child('favorites').child(favoriteUserId);\n          var favorite = $firebaseObject(favoriteRef);\n          return favorite.$remove();\n        },\n        removeFavoritedCount: function (favoriteUserId) {\n          var deferred = $q.defer();\n          var favoritedCountRef = ref.child(favoriteUserId).child('favoritedCount');\n          var favoritedCount = $firebaseObject(favoritedCountRef);\n          favoritedCount.$loaded().then(function (favoritedCount) {\n            favoritedCount.$value--;\n            return deferred.resolve(favoritedCount.$save());\n          });\n          return deferred.promise;\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('utility', utility);\n\n  utility.$inject = ['$firebaseObject', 'config', 'User'];\n\n  function utility($firebaseObject, config, User) {\n\n    var ref = new Firebase(config.serverUrl);\n\n    return {\n      getUserByName: getUserByName\n    };\n\n    function getUserByName(userName) {\n      var userIdRef = ref.child('userIds/' + userName);\n      return $firebaseObject(userIdRef).$loaded(function (userId) {\n        return new User(userId.$value);\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('HomeController', HomeController);\n\n  HomeController.$inject = ['$rootScope', '$state', '$uibModal', 'data', 'Photo', 'room', 'spot', 'toastr', 'User'];\n\n  function HomeController($rootScope, $state, $uibModal, data, Photo, room, spot, toastr, User) {\n\n    var userId = data.me.$id;\n\n    var vm = this;\n    vm.me = data.me;\n    vm.rooms = [];\n    vm.removePhoto = removePhoto;\n    vm.showModal = showModal;\n    vm.releaseSpot = releaseSpot;\n\n    activate();\n\n    function activate() {\n      checkUserData();\n      getRoom();\n      checkPhotos();\n      vm.me.getFavorites();\n    }\n\n    function checkUserData() {\n      if (_.isUndefined(vm.me.name) || _.isUndefined(vm.me.email)) {\n        toastr.warning('Please input your Username and Email.', 'Sorry, we can\\'t get Email.');\n        return $state.go('account');\n      }\n    }\n\n    function getRoom() {\n      vm.me.getRooms();\n      angular.forEach(vm.me.roomsData, function (room) {\n        room.$loaded(function (room) {\n          angular.forEach(room, function (value, key) {\n            if (key !== 'guest' && key !== 'host') return;\n            if (value === userId) return;\n            room.you = new User(value);\n          });\n        });\n      });\n    }\n\n    function checkPhotos() {\n      vm.me.photos.$loaded(function (photos) {\n        angular.forEach(vm.me.photos, function (photo) {\n          var spotKey = [userId, photo.$id].join('::');\n          spot.get(spotKey).$loaded(function (spot) {\n            photo.isSpot = !spot.hasOwnProperty('$value');\n          });\n        });\n      });\n    }\n\n    function removePhoto(photoId) {\n      data.me.removePhoto(photoId).then(\n        function (ref) {\n          return toastr.success('Photo removed!');\n        },\n        function (error) {\n          return toastr.error('Photo remove failed!');\n        }\n      );\n    }\n\n    function showModal(photoId) {\n      var modalInstance = $uibModal.open({\n        templateUrl: 'app/home/register-spot.html',\n        controller: 'RegisterSpotController',\n        controllerAs: 'registerSpot',\n        resolve: {\n          photoId: function () {\n            return photoId;\n          }\n        }\n      });\n      modalInstance.result.then(\n        function () {\n          return toastr.success('Spot registeration completed!');\n        },\n        function (reason) {\n          if (reason === 'cancel' || reason === 'backdrop click') return;\n          return toastr.error('Spot registeration failed!', 'Error');\n        }\n      );\n    }\n\n    function releaseSpot(photoId) {\n      data.me.releaseSpot(photoId).then(\n        function (ref) {\n          return toastr.success('Spot released!');\n        },\n        function (error) {\n          return toastr.error('Spot release failed!');\n        }\n      );\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.home').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/home',\n        controller: 'HomeController',\n        controllerAs: 'home',\n        templateUrl: 'app/home/home.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(true);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('RegisterSpotController', RegisterSpotController);\n\n  RegisterSpotController.$inject = ['$scope', '$uibModalInstance', 'data', 'photoId', 'spot'];\n\n  function RegisterSpotController($scope, $uibModalInstance, data, photoId, spot) {\n\n    var _spot = {};\n\n    var vm = this;\n    vm.map = {};\n    vm.addSpot = addSpot;\n    vm.cancel = cancel;\n\n    activate();\n\n    function activate() {\n      initialize();\n      setMap();\n      setMarker();\n    }\n\n    function initialize() {\n      _spot = {\n        latitude: 0,\n        longitude: 0\n      };\n    }\n\n    function setMap() {\n      vm.map = {\n        center: _spot,\n        zoom: 1,\n        events: {\n          click: setMarkerByMapClicked\n        }\n      };\n    }\n\n    function setMarker() {\n      vm.map.marker = {\n        key: 'marker',\n        coords: _spot,\n        options: {\n          draggable: true\n        },\n        events: {\n          dragend: setMarkerByMarkerDraged\n        }\n      };\n    }\n\n    function setMarkerByMapClicked(maps, eventName, args) {\n      _spot = {\n        latitude: args[0].latLng.lat(),\n        longitude: args[0].latLng.lng()\n      };\n      vm.map.marker.coords = _spot;\n      $scope.$apply();\n    }\n\n    function setMarkerByMarkerDraged(marker, eventName, model, args) {\n      _spot = {\n        latitude: marker.position.lat(),\n        longitude: marker.position.lng()\n      };\n    }\n\n    function addSpot() {\n      var spotKey = [data.me.$id, photoId].join('::');\n      spot.add(spotKey, _.values(_spot)).then(\n        function () {\n          $uibModalInstance.close();\n        },\n        function (error) {\n          $uibModalInstance.dismiss(error);\n        }\n      );\n    }\n\n    function cancel() {\n      $uibModalInstance.dismiss('cancel');\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('AcceptController', AcceptController);\n\n  AcceptController.$inject = ['$state', '$stateParams', 'contact', 'data', 'room', 'toastr', 'Transaction', 'User'];\n\n  function AcceptController($state, $stateParams, contact, data, room, toastr, Transaction, User) {\n\n    var id = $stateParams.contactId;\n    var notificationId = $stateParams.notificationId;\n\n    var vm = this;\n    vm.contact = {};\n    vm.accept = accept;\n    vm.dontAccept = dontAccept;\n\n    activate();\n\n    function activate() {\n      contact.get(id).$loaded().then(function (contact) {\n        vm.contact = contact;\n        vm.contact.guestData = new User(contact.guest);\n      });\n    }\n\n    function accept() {\n      var newRoomId = room.getNewRef().key();\n      var saveData = {};\n      var saveKey1 = 'rooms/' + newRoomId + '/guest';\n      var saveKey2 = 'rooms/' + newRoomId + '/host';\n      var saveKey3 = 'users/' + vm.contact.guest + '/rooms/' + newRoomId;\n      var saveKey4 = 'users/' + vm.contact.host + '/rooms/' + newRoomId;\n      var saveKey5 = 'users/' + vm.contact.host + '/notifications/' + notificationId;\n      var saveKey6 = 'contacts/' + id;\n      saveData[saveKey1] = vm.contact.guest;\n      saveData[saveKey2] = vm.contact.host;\n      saveData[saveKey3] = true;\n      saveData[saveKey4] = true;\n      saveData[saveKey5] = null;\n      saveData[saveKey6] = null;\n      Transaction.save(saveData).then(\n        function (ref) {\n          toastr.success('承認しました');\n          return $state.go('room', {\n            roomId: newRoomId\n          });\n        },\n        function (error) {\n          return toastr.error('承認できませんでした');\n        }\n      );\n    }\n\n    function dontAccept() {\n      var saveData = {};\n      var saveKey1 = 'users/' + vm.contact.host + '/notifications/' + notificationId;\n      var saveKey2 = 'contacts/' + id;\n      saveData[saveKey1] = null;\n      saveData[saveKey2] = null;\n      Transaction.save(saveData).then(\n        function (ref) {\n          toastr.success('拒否しました');\n          return $state.go('home');\n        },\n        function (error) {\n          return toastr.error('拒否できませんでした');\n        }\n      );\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('ContactController', ContactController);\n\n  ContactController.$inject = ['$rootScope', '$stateParams', '$uibModalInstance', 'contact', 'user', 'userId'];\n\n  function ContactController($rootScope, $stateParams, $uibModalInstance, contact, user, userId) {\n\n    var hostName = $stateParams.userId;\n\n    var vm = this;\n    vm.status = {};\n    vm.place = '';\n    vm.date = new Date();\n    vm.openCalendar = openCalendar;\n    vm.cancel = cancel;\n    vm.ok = ok;\n\n    activate();\n\n    function activate() {\n      vm.status.opened = false;\n    }\n\n    function openCalendar($event) {\n      vm.status.opened = true;\n    }\n\n    function cancel() {\n      $uibModalInstance.dismiss('cancel');\n    }\n\n    function ok() {\n      userId.get(hostName).$loaded().then(function (userId) {\n        var hostId = userId.$value;\n        var guestId = $rootScope.statuses.userId;\n        var contactData = {\n          place: vm.place,\n          date: vm.date.toString(),\n          host: hostId,\n          guest: guestId\n        };\n        contact.add(contactData).then(function (ref) {\n          var notificationData = {\n            from: guestId,\n            contactId: ref.key(),\n            created: new Date().toString()\n          };\n          user.addNotification(hostName, notificationData).then(function (ref) {\n            $uibModalInstance.close();\n          }, function (error) {\n            $uibModalInstance.dismiss(error);\n          });\n        }, function (error) {\n          $uibModalInstance.dismiss(error);\n        });\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('HostsController', HostsController);\n\n  HostsController.$inject = ['$interval', '$q', '$rootScope', '$stateParams', '$uibModal', 'currentAuth', 'data', 'language', 'photo', 'Photo', 'toastr', 'user', 'utility'];\n\n  function HostsController($interval, $q, $rootScope, $stateParams, $uibModal, currentAuth, data, language, photo, Photo, toastr, user, utility) {\n\n    var _userName = $stateParams.userId;\n\n    var vm = this;\n    vm.isMe = data.me.name === _userName;\n    vm.isFavorited = false;\n    vm.user = {};\n    vm.userLanguages = [];\n    vm.userPhotos = [];\n    vm.userMessages = [];\n    vm.addFavorite = addFavorite;\n    vm.removeFavorite = removeFavorite;\n    vm.showModal = showModal;\n\n    activate();\n\n    function activate() {\n      getUserData().then(function () {\n        checkFavorited();\n        vm.user.getLanguages();\n        // vm.user.age = _.isUndefined(user.birth) ? null : Math.floor(moment(new Date()).diff(moment(user.birth), 'years', true));\n      });\n    }\n\n    function getUserData() {\n      var deferred = $q.defer();\n      utility.getUserByName(_userName).then(function (user) {\n        vm.user = user;\n        return deferred.resolve();\n      });\n      return deferred.promise;\n    }\n\n    function getUserLanguages() {\n      var deferred = $q.defer();\n      var promises = [];\n      angular.forEach(vm.user.languages, function (value, key) {\n        promises.push((function () {\n          var deferred = $q.defer();\n          language.get(key).$loaded().then(function (language) {\n            vm.userLanguages.push(language.$value);\n            return deferred.resolve();\n          });\n          return deferred.promise;\n        })());\n      });\n      $q.all(promises).then(function () {\n        return deferred.resolve();\n      });\n      return deferred.promise;\n    }\n\n    function getUserPhotos() {\n      var deferred = $q.defer();\n      var promises = [];\n      angular.forEach(vm.user.photos, function (value, key) {\n        promises.push((function () {\n          var deferred = $q.defer();\n          photo.get(key).$loaded().then(function (photo) {\n            vm.userPhotos.push(photo);\n            return deferred.resolve();\n          });\n          return deferred.promise;\n        })());\n      });\n      $q.all(promises).then(function () {\n        return deferred.resolve();\n      });\n      return deferred.promise;\n    }\n\n    function checkFavorited() {\n      user.get($rootScope.statuses.userId).$loaded().then(function (user) {\n        if (_.isUndefined(user.favorites)) {\n          vm.isFavorited = false;\n          return;\n        }\n        vm.isFavorited = !_.isUndefined(user.favorites[vm.user.$id]);\n      });\n    }\n\n    function addFavorite() {\n      user.addFavorite(vm.user.$id).then(function (ref) {\n        user.addFavoritedCount(vm.user.$id).then(function (ref) {\n          vm.isFavorited = true;\n          return toastr.success('お気に入りに追加しました');\n        });\n      });\n    }\n\n    function removeFavorite() {\n      user.removeFavorite(vm.user.$id).then(function (ref) {\n        user.removeFavoritedCount(vm.user.$id).then(function (ref) {\n          vm.isFavorited = false;\n          return toastr.success('お気に入りを解除しました');\n        });\n      });\n    }\n\n    function showModal() {\n      var modalInstance = $uibModal.open({\n        templateUrl: 'app/hosts/contact.html',\n        controller: 'ContactController',\n        controllerAs: 'contact'\n      });\n      modalInstance.result.then(\n        function () {\n          return toastr.success('送信しました');\n        },\n        function (reason) {\n          if (reason === 'cancel') return;\n          return toastr.error('送信できませんでした', 'Error');\n        }\n      );\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.hosts').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('hosts', {\n        url: '/:userId',\n        controller: 'HostsController',\n        controllerAs: 'hosts',\n        templateUrl: 'app/hosts/hosts.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      })\n      .state('accept', {\n        url: '/accept/:contactId::notificationId',\n        controller: 'AcceptController',\n        controllerAs: 'accept',\n        templateUrl: 'app/hosts/accept.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(true);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('header', header);\n\n  header.$inject = [];\n\n  function header() {\n    return {\n      templateUrl: 'app/layout/header.html',\n      scope: {},\n      controller: HeaderController,\n      controllerAs: 'header',\n      bindToController: true\n    };\n  }\n\n  HeaderController.$inject = ['$rootScope', '$scope', '$state', '$translate', 'auth', 'data', 'User'];\n\n  function HeaderController($rootScope, $scope, $state, $translate, auth, data, User) {\n\n    var vm = this;\n    vm.rootScope = $rootScope;\n    vm.data = data;\n    vm.notifications = [];\n    vm.changeLocale = changeLocale;\n    vm.onNotificationClick = onNotificationClick;\n    vm.logout = logout;\n    vm.isLoggedIn = isLoggedIn;\n\n    activate();\n\n    function activate() {\n      $scope.$watch('header.data.me', function (me) {\n        angular.forEach(me.notifications, function (notification, notificationId) {\n          notification.id = notificationId;\n          vm.notifications.push(notification);\n          notification.sender = new User(notification.from);\n        });\n      });\n    }\n\n    function changeLocale(langKey) {\n      $translate.use(langKey);\n    }\n\n    function onNotificationClick(notification) {\n      $state.go('accept', {\n        contactId: notification.contactId,\n        notificationId: notification.id\n      });\n    }\n\n    function isLoggedIn() {\n      return _.size(data.me);\n    }\n\n    function logout() {\n      auth.logout();\n      $state.go('spots');\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('chat', chat);\n\n  chat.$inject = [];\n\n  function chat() {\n    return {\n      templateUrl: 'app/room/chat.html',\n      scope: {\n        roomId: '='\n      },\n      controller: ChatController,\n      controllerAs: 'chat',\n      bindToController: true\n    };\n  }\n\n  ChatController.$inject = ['$rootScope', 'room', 'user'];\n\n  function ChatController($rootScope, room, user) {\n\n    var vm = this;\n    vm.isMessagesLoaded = false;\n    vm.postMessage = postMessage;\n\n    activate();\n\n    function activate() {\n      getRoom();\n      room.getMessages(vm.roomId).$watch(getRoom);\n    }\n\n    function getRoom() {\n      room.get(vm.roomId).$loaded().then(function (room) {\n        vm.messages = room.messages;\n        getYourData(room);\n        angular.forEach(room.messages, function (message) {\n          message.isMe = message.userId === $rootScope.statuses.userId;\n        });\n        vm.isMessagesLoaded = true;\n      });\n    }\n\n    function getYourData(room) {\n      angular.forEach(room, function (value, key) {\n        if (key !== 'guest' && key !== 'host') return;\n        if (value === $rootScope.statuses.userId) return;\n        user.get(value).$loaded().then(function (user) {\n          vm.you = user;\n        });\n      });\n    }\n\n    function postMessage() {\n      var postData = {\n        message: vm.newMessage,\n        userId: $rootScope.statuses.userId\n      };\n      room.postMessage(vm.roomId, postData).then(function (ref) {\n        vm.newMessage = '';\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room').controller('RoomController', RoomController);\n\n  RoomController.$inject = ['$rootScope', '$stateParams', 'data', 'photo', 'room', 'Room', 'user', 'User'];\n\n  function RoomController($rootScope, $stateParams, data, photo, room, Room, user, User) {\n\n    var id = $stateParams.roomId;\n\n    var vm = this;\n    vm.room = new Room(id);\n\n    activate();\n\n    function activate() {\n      vm.room.$loaded(function (room) {\n        angular.forEach(['guest', 'host'], function (type) {\n          if (room[type] === data.me.$id) {\n            room[type] = data.me;\n            room.me = type;\n          } else {\n            room[type] = new User(room[type]);\n          }\n        });\n      });\n      vm.schedule = [];\n      setCalendarConfig();\n      vm.schedule.push([{\n        title: 'Open Sesame',\n        start: new Date(2015, 11, 28),\n        // end: new Date(2015, 11, 29),\n        allDay: true,\n        className: ['openSesame']\n      }]);\n    }\n\n    function setCalendarConfig() {\n      vm.uiConfig = {\n        calendar: {\n          height: 500,\n          editable: true,\n          header: {\n            left: 'title',\n            center: '',\n            right: 'prev,today,next'\n          }\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('room', {\n        url: '/rooms/:roomId',\n        controller: 'RoomController',\n        controllerAs: 'room',\n        templateUrl: 'app/room/room.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(true);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.spots').controller('SpotsController', SpotsController);\n\n  SpotsController.$inject = ['$q', '$rootScope', '$scope', 'currentAuth', 'language', 'photo', 'spot', 'uiGmapGoogleMapApi', 'user'];\n\n  function SpotsController($q, $rootScope, $scope, currentAuth, language, photo, spot, uiGmapGoogleMapApi, user) {\n\n    var _bounds = {};\n    var _isDragging = false;\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.isLoading = false;\n    vm.map = {};\n    vm.control = {};\n    vm.events = {};\n    vm.markers = [];\n    vm.searchbox = {};\n    vm.languages = {};\n    vm.getSpots = getSpots;\n\n    activate();\n\n    function activate() {\n      setGoogleMap();\n      setSearchbox();\n      getLanguages();\n    }\n\n    function setGoogleMap() {\n      setMapHeight();\n      vm.map.center = {\n        latitude: 0,\n        longitude: 0\n      };\n      vm.map.zoom = 3;\n      vm.map.events = {\n        bounds_changed: boundsChanged,\n        drag: drag,\n        dragend: dragend\n      };\n      vm.map.bounds = {\n        northeast: {\n          latitude: 180,\n          longitude: 180\n        },\n        southwest: {\n          latitude: -180,\n          longitude: -180\n        }\n      };\n    }\n\n    function setMapHeight() {\n      var contentHeight = window.innerHeight - 58 - 25;\n      angular.element(document).find('.angular-google-map-container').css({ height: contentHeight + 'px' });\n    }\n\n    function boundsChanged(map) {\n      if (_isDragging) return;\n      if (vm.isLoading) return;\n      getBounds(map);\n      getSpots();\n    }\n\n    function drag() {\n      _isDragging = true;\n    }\n\n    function dragend(map) {\n      _isDragging = false;\n      if (vm.isLoading) return;\n      getBounds(map);\n      getSpots();\n    }\n\n    function getBounds(map) {\n      _bounds = {\n        ne: {\n          lat: map.getBounds().getNorthEast().lat(),\n          lng: map.getBounds().getNorthEast().lng()\n        },\n        sw: {\n          lat: map.getBounds().getSouthWest().lat(),\n          lng: map.getBounds().getSouthWest().lng()\n        }\n      };\n    }\n\n    function setSearchbox() {\n      vm.searchbox = {\n        template: 'app/spots/searchbox.html',\n        events: {\n          places_changed: placesChanged\n        },\n        position: 'top-right'\n      };\n    }\n\n    function placesChanged(searchBox) {\n      var place = searchBox.getPlaces();\n      if (!place || place === 'undefined' || place.length === 0) return;\n      if (_.has(place[0].geometry, 'viewport')) {\n        vm.map.bounds = {\n          northeast: {\n            latitude: place[0].geometry.viewport.getNorthEast().lat(),\n            longitude: place[0].geometry.viewport.getNorthEast().lng()\n          },\n          southwest: {\n            latitude: place[0].geometry.viewport.getSouthWest().lat(),\n            longitude: place[0].geometry.viewport.getSouthWest().lng()\n          }\n        };\n        return;\n      }\n      vm.map.center = {\n        latitude: place[0].geometry.location.lat(),\n        longitude: place[0].geometry.location.lng()\n      };\n      vm.map.zoom = 17;\n    }\n\n    function getSpots() {\n      vm.isLoading = true;\n      vm.markers = [];\n      var locations = [];\n      angular.forEach(_bounds, function (points) {\n        var location = [];\n        angular.forEach(points, function (point) {\n          location.push(point);\n        });\n        locations.push(location);\n      });\n      var distance = spot.distance(locations);\n      var radius = distance / 3;\n      spot.query(_.values(vm.map.center), radius).then(getSpotsSuccess, getSpotFailed);\n    }\n\n    function getSpotsSuccess(spots) {\n      var promises = [];\n      angular.forEach(spots, function (spot, index) {\n        promises.push((function (spot, index) {\n          setSpotData(spot, index);\n        })(spot, index));\n      });\n      $q.all(promises).then(function () {\n        vm.isLoading = false;\n      });\n    }\n\n    function getSpotFailed(error) {\n      vm.isLoading = false;\n    }\n\n    function setSpotData(spot, index) {\n      var deferred = $q.defer();\n      var newSpot = {};\n      var ids = spot.id.split('::');\n      var userId = ids[0];\n      newSpot.id = ids[1];\n      newSpot.latitude = spot.location[0];\n      newSpot.longitude = spot.location[1];\n      newSpot.show = true;\n      newSpot.events = {\n        mouseover: function (marker) {\n          newSpot.show = true;\n        },\n        mouseout: function (marker) {\n          newSpot.show = false;\n        }\n      };\n      newSpot.photos = [];\n      var photoKey = userId + '/' + newSpot.id;\n      photo.get(photoKey).$loaded().then(function (photo) {\n        newSpot.photos.push(photo);\n        photo.user = {};\n        return user.get(userId).$loaded().then(function (user) {\n          photo.user = user;\n          newSpot.userId = user.name;\n          var keepGoing = true;\n          angular.forEach(vm.languages, function (language) {\n            if (!keepGoing) return;\n            if (!language.checked) return;\n            if (!_.has(newSpot.photos[0].user.languages, language.$id)) return;\n            vm.markers.push(newSpot);\n            keepGoing = false;\n          });\n          return deferred.resolve();\n        });\n      });\n      return deferred.promise;\n    }\n\n    function getLanguages() {\n      language.getAll().$loaded().then(function (languages) {\n        vm.languages = languages;\n        angular.forEach(languages, function (language) {\n          language.checked = true;\n        });\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.spots').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('spots', {\n        url: '/',\n        controller: 'SpotsController',\n        controllerAs: 'spots',\n        templateUrl: 'app/spots/spots.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(false);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('TicketsAddController', TicketsAddController);\n\n  TicketsAddController.$inject = ['$state', 'ticket'];\n\n  function TicketsAddController($state, ticket) {\n    var vm = this;\n    vm.add = add;\n\n    activate();\n\n    function activate() {}\n\n    function add() {\n      ticket.$add({\n        departureDate: vm.departureDate,\n        arrivedDate: vm.arrivedDate,\n        destination: vm.destination,\n        languages: vm.languages,\n        message: vm.message\n      }).then(function () {\n        $state.go('tickets');\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('TicketsController', TicketsController);\n\n  TicketsController.$inject = ['ticket'];\n\n  function TicketsController(ticket) {\n    var vm = this;\n    vm.tickets = [];\n\n    activate();\n\n    function activate() {\n      vm.tickets = ticket;\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.tickets').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('tickets', {\n        url: '/tickets',\n        controller: 'TicketsController',\n        controllerAs: 'tickets',\n        templateUrl: 'app/tickets/tickets.html',\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      })\n      .state('tickets.add', {\n        url: '/add',\n        views: {\n          \"@\": {\n            controller: 'TicketsAddController',\n            controllerAs: 'ticketsAdd',\n            templateUrl: 'app/tickets/tickets-add.html'\n          }\n        },\n        resolve: {\n          currentAuth: getCurrentAuth\n        }\n      });\n  }\n\n  getCurrentAuth.$inject = ['auth'];\n\n  function getCurrentAuth(auth) {\n    return auth.check(true);\n  }\n})();\n"],"sourceRoot":"/source/"}