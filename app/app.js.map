{"version":3,"sources":["app.module.js","core.module.js","account/account.module.js","layout/layout.module.js","hosts/hosts.module.js","room/room.module.js","spots/spots.module.js","tickets/tickets.module.js","home/home.module.js","account/account.controller.js","account/account.route.js","core/account.service.js","core/auth.service.js","core/contact.service.js","core/core.config.js","core/core.route.js","core/core.run.js","core/language.service.js","core/login-buttons.directive.js","core/notification.service.js","core/photo.service.js","core/room.service.js","core/spot.service.js","core/ticket.service.js","core/user-id.service.js","core/user.service.js","layout/header.directive.js","hosts/contact.controller.js","hosts/hosts.controller.js","hosts/hosts.route.js","room/room.controller.js","room/room.route.js","spots/spots.controller.js","spots/spots.route.js","tickets/tickets-add.controller.js","tickets/tickets.controller.js","tickets/tickets.route.js","home/home.controller.js","home/home.route.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACttBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["(function () {\n  'use strict';\n\n  angular.module('app', [\n    'ngAnimate',\n    'ngTouch',\n    'ngCookies',\n    'angular-carousel',\n    'ui.router',\n    'ui.bootstrap',\n    'uiGmapgoogle-maps',\n    'toastr',\n    'ui.calendar',\n    'firebase',\n    'app.layout',\n    'app.home',\n    'app.spots',\n    'app.room',\n    'app.tickets',\n    'app.account',\n    'app.hosts',\n    'app.core'\n  ]);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.account', []);\n})();\n","(function() {\n  'use strict';\n\n  angular.module('app.layout', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.hosts', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.spots', []).config(config);\n\n  config.$inject = ['uiGmapGoogleMapApiProvider'];\n\n  function config(uiGmapGoogleMapApiProvider) {\n    uiGmapGoogleMapApiProvider.configure({\n      key: 'AIzaSyDLH67jWiu3QywVikRZuznyHPTM-d8dWsc',\n      v: '3.20',\n      libraries: 'places'\n    });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.tickets', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.home', []);\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('AccountController', AccountController);\n\n  AccountController.$inject = ['currentAuth', 'toastr', 'user'];\n\n  function AccountController(currentAuth, toastr, user) {\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.update = update;\n\n    activate();\n\n    function activate() {\n      getUserData();\n    }\n\n    function getUserData() {\n      user.get(currentAuth.uid).$loaded().then(function (userData) {\n        var birthDay;\n        if (!_.isNull(userData.birth)) {\n          birthDay = moment(userData.birth)._d;\n        }\n        vm.name = userData.name || '';\n        vm.fullName = userData.fullName || '';\n        vm.email = userData.email || '';\n        vm.gender = userData.gender || '';\n        vm.languages = userData.languages || '';\n        vm.birth = birthDay || '';\n        vm.job = userData.job || '';\n        vm.residence = userData.residence || '';\n        vm.languageCollection = _.keys(vm.languages);\n        vm.messages = userData.messages || '';\n      });\n    }\n\n    function update() {\n      var birthTime = new Date(vm.birth).getTime();\n      var birthDay = moment(birthTime).format('YYYY-MM-DD');\n      var key = currentAuth.uid;\n      var updateData = {\n        name: vm.name,\n        fullName: vm.fullName,\n        email: vm.email,\n        gender: vm.gender,\n        languages: vm.languages,\n        birth: birthDay,\n        job: vm.job,\n        residence: vm.residence,\n        messages: vm.messages,\n        imageUrl: currentAuth.facebook.profileImageURL\n      };\n      user.save(key, updateData).then(function (ref) {\n        toastr.success('Update Success!');\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.account').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('account', {\n        url: '/account',\n        controller: 'AccountController',\n        controllerAs: 'account',\n        templateUrl: 'app/account/account.html',\n        resolve: {\n          currentAuth: ['auth', function (auth) {\n            return auth.firebase.$requireAuth();\n          }]\n        }\n      });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('account', account);\n\n  account.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function account($firebaseArray, $firebaseObject, config) {\n\n    return new Account();\n\n    function Account() {\n      var ref = new Firebase(config.serverUrl + 'accounts');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var accountRef = ref.child(id);\n          return $firebaseObject(accountRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newAccountRef = ref.child(key);\n          var newAccount = $firebaseObject(newAccountRef);\n          newAccount = angular.merge(newAccount, data);\n          return newAccount.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('auth', auth);\n\n  auth.$inject = ['$firebaseAuth', '$http', '$q', 'config'];\n\n  function auth($firebaseAuth, $http, $q, config) {\n\n    return new Auth();\n\n    function Auth() {\n      var firebaseRef = new Firebase(config.serverUrl);\n      return {\n        firebase: $firebaseAuth(firebaseRef),\n        tokenGenerator: function (uid) {\n          var deferred = $q.defer();\n          var params = {\n            uid: uid\n          };\n          $http.get(config.authApiUrl, { params: params }).then(function (response) {\n            return deferred.resolve(response);\n          }, function (response) {\n            return deferred.reject(response);\n          });\n          return deferred.promise;\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('contact', contact);\n\n  contact.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function contact($firebaseArray, $firebaseObject, config) {\n\n    return new Contact();\n\n    function Contact() {\n      var ref = new Firebase(config.serverUrl + 'contacts');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newContactRef = ref.child(key);\n          var newContact = $firebaseObject(newContactRef);\n          newContact = angular.merge(newContact, data);\n          return newContact.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('config', config);\n\n  config.$inject = [];\n\n  function config() {\n    var Config = function () {\n      return {\n        'serverUrl': 'https://bandally.firebaseio.com/',\n        'authApiUrl': 'http://localhost:4000'\n      };\n    };\n    return new Config();\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').config(route);\n\n  route.$inject = ['$urlRouterProvider'];\n\n  function route($urlRouterProvider) {\n    $urlRouterProvider.otherwise('/');\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').run(run);\n\n  run.$inject = ['$cookies', '$rootScope', '$state', 'auth', 'user'];\n\n  function run($cookies, $rootScope, $state, auth, user) {\n\n    // 該当ページのスラッグをbodyのclassに入れるため\n    $rootScope.$on('$stateChangeSuccess', function (event, toState, toParams, fromState, fromParams, error) {\n      angular.merge($rootScope, {\n        statuses: {\n          pageName: toState.controllerAs\n        }\n      });\n    });\n\n    // 未ログインのままログインが必要なページに遷移した場合の処理\n    $rootScope.$on('$stateChangeError', function (event, toState, toParams, fromState, fromParams, error) {\n      if (error === 'AUTH_REQUIRED') {\n        return $state.go('spots');\n      }\n    });\n\n    // 初期化時にログイン済みかチェック\n    auth.firebase.$waitForAuth().then(function (authData) {\n\n      // ログイン済みの場合はトークンを更新してリターン\n      if (!_.isNull(authData)) {\n        putToken(authData.facebook.accessToken);\n        setUserData(authData.uid);\n        return $state.go('home');\n      }\n\n      var token = getToken();\n\n      // トークンを持っていない場合は未ログインユーザーとしてリターン\n      if (_.isUndefined(token)) {\n        return $state.go('spots');\n      }\n\n      // トークンでログイン可能かチェック\n      auth.firebase.$authWithOAuthToken('facebook', token).then(function (authData) {\n        putToken(authData.facebook.accessToken);\n        setUserData(authData.uid);\n        return $state.go('home');\n      }).catch(function (error) {\n        return $state.go('spots');\n      });\n    });\n\n    function putToken(token) {\n      $cookies.put('bandally', token, {\n        expires: new Date(1000 * 60 * 60 * 24 * 365 * 10 + (new Date()).getTime())\n      });\n    }\n\n    function getToken() {\n      return $cookies.get('bandally');\n    }\n\n    function setUserData(id) {\n      user.get(id).$loaded().then(function (user) {\n        angular.merge($rootScope, {\n          statuses: {\n            userId: id,\n            userName: user.name\n          }\n        });\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('language', language);\n\n  language.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function language($firebaseArray, $firebaseObject, config) {\n\n    return new Language();\n\n    function Language() {\n      var ref = new Firebase(config.serverUrl + 'languages');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (data) {\n          var newLanguageRef = ref.child(data.name);\n          var newLanguage = $firebaseObject(newLanguageRef);\n          newLanguage = angular.merge(newLanguage, data);\n          return newLanguage.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('loginButtons', loginButtons);\n\n  loginButtons.$inject = [];\n\n  function loginButtons() {\n    return {\n      templateUrl: 'app/core/login-buttons.html',\n      scope: {},\n      controller: LoginButtonsController,\n      controllerAs: 'loginButtons',\n      bindToController: true\n    };\n  }\n\n  LoginButtonsController.$inject = ['$cookies', '$rootScope', '$state', 'account', 'auth', 'user'];\n\n  function LoginButtonsController($cookies, $rootScope, $state, account, auth, user) {\n\n    var vm = this;\n    vm.fbLogin = fbLogin;\n\n    activate();\n\n    function activate() {}\n\n    function fbLogin() {\n      var scope = ['public_profile', 'email'];\n      auth.firebase.$authWithOAuthPopup('facebook', {\n        scope: scope.join()\n      }).then(fbLoginSuccess).catch(fbLoginError);\n    }\n\n    function fbLoginSuccess(authData) {\n      putToken(authData.token);\n      account.save(authData.uid, authData).then(function (ref) {\n\n        // すでにusersに登録があればホームに遷移\n        if (!_.isNull(user.get(authData.uid).$value)) {\n          return $state.go('home');\n        }\n\n        var userData = {};\n        userData.name = authData.facebook.email ? authData.facebook.email.split('@')[0] : null;\n        userData.fullName = authData.facebook.displayName || null;\n        userData.email = authData.facebook.email || null;\n        userData.gender = authData.facebook.cachedUserProfile.gender || null;\n        userData.imageUrl = authData.facebook.profileImageURL || null;\n        user.save(authData.uid, userData).then(userSaveSuccess, userSaveError);\n      });\n    }\n\n    function fbLoginError(error) {\n      console.log('Authentication failed:', error);\n    }\n\n    function userSaveSuccess(ref) {\n      var userId = ref.key();\n      var userName = user.get(userId).name;\n      $rootScope.statuses = {\n        userId: userId,\n        userName: userName\n      };\n      $state.go('home');\n    }\n\n    function userSaveError(error) {\n      console.log(error);\n    }\n\n    function putToken(token) {\n      var now = (new Date()).getTime();\n      var expires = new Date(1000 * 60 * 60 * 24 * 365 * 10 + now);\n      var options = {\n      \texpires: expires\n      };\n      $cookies.put('bandally', token, options);\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('notification', notification);\n\n  notification.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function notification($firebaseArray, $firebaseObject, config) {\n\n    return new Notification();\n\n    function Notification() {\n      var ref = new Firebase(config.serverUrl + 'notifications');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (userName, data) {\n          var userRef = ref.child(userName);\n          return $firebaseArray(userRef).$add(data);\n        },\n        save: function (key, data) {\n          var newNotificationRef = ref.child(key);\n          var newNotification = $firebaseObject(newNotificationRef);\n          newNotification = angular.merge(newNotification, data);\n          return newNotification.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('photo', photo);\n\n  photo.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function photo($firebaseArray, $firebaseObject, config) {\n\n    return new Photo();\n\n    function Photo() {\n      var ref = new Firebase(config.serverUrl + 'photos');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var photoRef = ref.child(id);\n          return $firebaseObject(photoRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (data) {\n          var newPhotoRef = ref.child(data.uid);\n          var newPhoto = $firebaseObject(newPhotoRef);\n          newPhoto = angular.merge(newPhoto, data);\n          return newPhoto.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('room', room);\n\n  room.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function room($firebaseArray, $firebaseObject, config) {\n\n    return new Room();\n\n    function Room() {\n      var ref = new Firebase(config.serverUrl + 'rooms');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        postMessage: function (roomId, data) {\n          var roomRef = ref.child(roomId).child('messages');\n          return $firebaseArray(roomRef).$add(data);\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('spot', spot);\n\n  spot.$inject = ['$firebaseArray', '$firebaseObject', 'config'];\n\n  function spot($firebaseArray, $firebaseObject, config) {\n\n    return new Spot();\n\n    function Spot() {\n      var ref = new Firebase(config.serverUrl + 'spots');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (data) {\n          var newSpotRef = ref.child(data.uid);\n          var newSpot = $firebaseObject(newSpotRef);\n          newSpot = angular.merge(newSpot, data);\n          return newSpot.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('ticket', ticket);\n\n  ticket.$inject = ['$firebaseArray', 'config'];\n\n  function ticket($firebaseArray, config) {\n    var ref = new Firebase(config.serverUrl + 'tickets');\n    return $firebaseArray(ref);\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('userId', userId);\n\n  userId.$inject = ['$firebaseArray', '$firebaseObject', '$rootScope', 'config'];\n\n  function userId($firebaseArray, $firebaseObject, $rootScope, config) {\n\n    return new UserId();\n\n    function UserId() {\n      var ref = new Firebase(config.serverUrl + 'userIds');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userIdRef = ref.child(id);\n          return $firebaseObject(userIdRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newUserIdRef = ref.child(key);\n          var newUserId = $firebaseObject(newUserIdRef);\n          newUserId = angular.merge(newUserId, data);\n          return newUser.$save();\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.core').factory('user', user);\n\n  user.$inject = ['$firebaseArray', '$firebaseObject', '$q', '$rootScope', 'config', 'userId'];\n\n  function user($firebaseArray, $firebaseObject, $q, $rootScope, config, userId) {\n\n    return new User();\n\n    function User() {\n      var ref = new Firebase(config.serverUrl + 'users');\n      return {\n        getAll: function () {\n          return $firebaseArray(ref);\n        },\n        get: function (id) {\n          var userRef = ref.child(id);\n          return $firebaseObject(userRef);\n        },\n        add: function (data) {\n          return $firebaseArray(ref).$add(data);\n        },\n        save: function (key, data) {\n          var newUserRef = ref.child(key);\n          var newUser = $firebaseObject(newUserRef);\n          newUser = angular.merge(newUser, data);\n          return newUser.$save();\n        },\n        addNotification: function (userName, data) {\n          var deferred = $q.defer();\n          userId.get(userName).$loaded().then(function (userId) {\n            var notificationRef = ref.child(userId.$value).child('notifications');\n            return $firebaseArray(notificationRef).$add(data).then(function (ref) {\n              return deferred.resolve(ref);\n            });\n          });\n          return deferred.promise;\n        }\n      };\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').directive('header', header);\n\n  header.$inject = [];\n\n  function header() {\n    return {\n      templateUrl: 'app/layout/header.html',\n      scope: {},\n      controller: HeaderController,\n      controllerAs: 'header',\n      bindToController: true\n    };\n  }\n\n  HeaderController.$inject = ['$cookies', '$state', 'auth', 'user'];\n\n  function HeaderController($cookies, $state, auth, user) {\n\n    var vm = this;\n    vm.auth = {};\n    vm.notifications = {};\n    vm.logout = logout;\n\n    activate();\n\n    function activate() {\n      auth.firebase.$onAuth(function (authData) {\n        vm.auth = authData;\n        user.get(authData.uid).$loaded().then(function (user) {\n          vm.notifications = user.notifications;\n        })\n      });\n    }\n\n    function logout() {\n      auth.firebase.$unauth();\n      $cookies.remove('bandally');\n      $state.go('spots');\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('ContactController', ContactController);\n\n  ContactController.$inject = ['$rootScope', '$stateParams', '$uibModalInstance', 'contact', 'user', 'userId'];\n\n  function ContactController($rootScope, $stateParams, $uibModalInstance, contact, user, userId) {\n\n    var hostName = $stateParams.userId;\n\n    var vm = this;\n    vm.status = {};\n    vm.place = '';\n    vm.date = new Date();\n    vm.openCalendar = openCalendar;\n    vm.cancel = cancel;\n    vm.ok = ok;\n\n    activate();\n\n    function activate() {\n      vm.status.opened = false;\n    }\n\n    function openCalendar($event) {\n      vm.status.opened = true;\n    }\n\n    function cancel() {\n      $uibModalInstance.dismiss('cancel');\n    }\n\n    function ok() {\n      userId.get(hostName).$loaded().then(function (userId) {\n        var hostId = userId.$value;\n        var guestId = $rootScope.statuses.userId;\n        var contactData = {\n          place: vm.place,\n          date: vm.date.toString(),\n          host: hostId,\n          guest: guestId\n        };\n        contact.add(contactData).then(function (ref) {\n          var notificationData = {\n            from: guestId,\n            contactId: ref.key(),\n            created: new Date().toString()\n          };\n          user.addNotification(hostName, notificationData);\n        });\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('HostsController', HostsController);\n\n  HostsController.$inject = ['$uibModal', '$stateParams', 'currentAuth', 'language', 'photo', 'user', 'userId'];\n\n  function HostsController($uibModal, $stateParams, currentAuth, language, photo, user, userId) {\n\n    var id = $stateParams.userId;\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.showModal = showModal;\n\n    activate();\n\n    function activate() {\n      getUserData();\n      vm.images = photo.getAll();\n    }\n\n    function getUserData() {\n      userId.get(id).$loaded().then(function (userId) {\n        user.get(userId.$value).$loaded().then(function (user) {\n          vm.user = user;\n          vm.user.age = _.isUndefined(user.birth) ? null : Math.floor(moment(new Date()).diff(moment(user.birth), 'years', true));\n          vm.user.languageNames = [];\n          angular.forEach(user.languages, function (value, key) {\n            language.get(key).$loaded().then(function (language) {\n              vm.user.languageNames.push(language.$value);\n            });\n          });\n          vm.user.messageCollection = _.values(user.messages);\n        });\n      });\n    }\n\n    function showModal() {\n      $uibModal.open({\n        templateUrl: 'app/hosts/contact.html',\n        controller: 'ContactController',\n        controllerAs: 'contact'\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.hosts').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('hosts', {\n        url: '/:userId',\n        controller: 'HostsController',\n        controllerAs: 'hosts',\n        templateUrl: 'app/hosts/hosts.html',\n        resolve: {\n          currentAuth: ['auth', function (auth) {\n            return auth.firebase.$requireAuth();\n          }]\n        }\n      });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room').controller('RoomController', RoomController);\n\n  RoomController.$inject = ['$rootScope', '$stateParams', 'currentAuth', 'photo', 'room', 'user'];\n\n  function RoomController($rootScope, $stateParams, currentAuth, photo, room, user) {\n\n    var id = $stateParams.roomId;\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.room = {};\n    vm.users = {};\n    vm.isMe = isMe;\n    vm.postMessage = postMessage;\n    vm.schedule = [];\n\n    activate();\n\n    function activate() {\n      room.get(id).$watch(getMessages);\n      setCalendarConfig();\n      vm.schedule.push([{\n        title: 'Open Sesame',\n        start: new Date(2015, 11, 28),\n        // end: new Date(2015, 11, 29),\n        allDay: true,\n        className: ['openSesame']\n      }]);\n    }\n\n    function getMessages() {\n      room.get(id).$loaded().then(function (room) {\n        vm.room = room;\n        user.get(room.guestId).$loaded().then(function (guest) {\n          vm.guest = guest;\n        });\n        user.get(room.hostId).$loaded().then(function (host) {\n          vm.host = host;\n          vm.host.photos = photo.getAll();\n        });\n        angular.forEach(room.userIds, function (bool, userId) {\n          user.get(userId).$loaded().then(function (user) {\n            vm.users[user.name] = user;\n            if (_.includes(user.accountIds, currentAuth.uid)) {\n              room.me = user.name;\n            }\n          });\n        });\n      });\n    }\n\n    function setCalendarConfig() {\n      vm.uiConfig = {\n        calendar: {\n          height: 500,\n          editable: true,\n          header: {\n            left: 'title',\n            center: '',\n            right: 'prev,today,next'\n          }\n        }\n      };\n    }\n\n    function isMe(userId) {\n      return vm.room.me === userId;\n    }\n\n    function postMessage() {\n      var postData = {\n        message: vm.newMessage,\n        userId: vm.room.me\n      };\n      room.postMessage(vm.room.$id, postData).then(function () {\n        vm.newMessage = '';\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.room').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('room', {\n        url: '/rooms/:roomId',\n        controller: 'RoomController',\n        controllerAs: 'room',\n        templateUrl: 'app/room/room.html',\n        resolve: {\n          currentAuth: ['auth', function(auth) {\n            return auth.$requireAuth();\n          }]\n        }\n      });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('SpotsController', SpotsController);\n\n  SpotsController.$inject = ['$rootScope', '$scope', 'currentAuth', 'language', 'photo', 'spot', 'uiGmapGoogleMapApi', 'user'];\n\n  function SpotsController($rootScope, $scope, currentAuth, language, photo, spot, uiGmapGoogleMapApi, user) {\n\n    var _bounds = {};\n    var _dragging = false;\n\n    var vm = this;\n    vm.me = currentAuth;\n    vm.map = {};\n    vm.control = {};\n    vm.events = {};\n    vm.markers = [];\n    vm.searchbox = {};\n    vm.languages = {};\n    vm.getSpots = getSpots;\n\n    activate();\n\n    function activate() {\n      setGoogleMap();\n      setSearchbox();\n      getLanguages();\n    }\n\n    function setGoogleMap() {\n      setMapHeight();\n      uiGmapGoogleMapApi.then(function (maps) {\n        vm.map.center = {\n          latitude: 0,\n          longitude: 0\n        };\n        vm.map.zoom = 2;\n        vm.map.events = {\n          bounds_changed: boundsChanged,\n          drag: drag,\n          dragend: dragend\n        };\n      });\n    }\n\n    function setMapHeight() {\n      var contentHeight = window.innerHeight - 58 - 25;\n      angular.element(document).find('.angular-google-map-container').css({ height: contentHeight + 'px' });\n    }\n\n    function getBounds(map) {\n      _bounds = {\n        ne: {\n          lat: map.getBounds().getNorthEast().lat(),\n          lng: map.getBounds().getNorthEast().lng()\n        },\n        sw: {\n          lat: map.getBounds().getSouthWest().lat(),\n          lng: map.getBounds().getSouthWest().lng()\n        }\n      };\n    }\n\n    function boundsChanged(map) {\n      if (_dragging) return;\n      getBounds(map);\n      vm.markers = [];\n      getSpots();\n    }\n\n    function drag() {\n      _dragging = true;\n    }\n\n    function dragend(map) {\n      _dragging = false;\n      if (_dragging) return;\n      getBounds(map);\n      vm.markers = [];\n      getSpots();\n    }\n\n    function setSearchbox() {\n      vm.searchbox = {\n        template: 'app/spots/searchbox.html',\n        events: {\n          places_changed: function (searchBox) {\n            var place = searchBox.getPlaces();\n            if (!place || place === 'undefined' || place.length === 0) {\n              console.log('no place data :(');\n              return;\n            }\n            vm.map.center = {\n              latitude: place[0].geometry.location.lat(),\n              longitude: place[0].geometry.location.lng()\n            };\n          }\n        },\n        position: 'top-right'\n      };\n    }\n\n    function getSpots() {\n      vm.markers = [];\n      spot.getAll().$loaded().then(getSpotsSuccess);\n    }\n\n    function getSpotsSuccess(spots) {\n      angular.forEach(spots, setSpotData);\n    }\n\n    function setSpotData(spot, index) {\n      var isCurrentLatitude = spot.geoCode.latitude < _bounds.ne.lat && spot.geoCode.latitude > _bounds.sw.lat;\n      var isCurrentLongitude = spot.geoCode.longitude < _bounds.ne.lng && spot.geoCode.longitude > _bounds.sw.lng;\n      if (!isCurrentLatitude || !isCurrentLongitude) {\n        return;\n      }\n      var newSpot = {};\n      newSpot.id = spot.$id;\n      newSpot.latitude = spot.geoCode.latitude;\n      newSpot.longitude = spot.geoCode.longitude;\n      newSpot.show = true;\n      newSpot.events = {\n        mouseover: function (marker) {\n          newSpot.show = true;\n        },\n        mouseout: function (marker) {\n          newSpot.show = false;\n        }\n      };\n      newSpot.photos = [];\n      photo.get(spot.photoId).$loaded().then(function (photo) {\n        newSpot.photos.push(photo);\n        photo.user = {};\n        user.get(photo.userId).$loaded().then(function (user) {\n          photo.user = user;\n          var keepGoing = true;\n          angular.forEach(vm.languages, function (language) {\n            if (!keepGoing) return;\n            if (!language.checked) return;\n            if (!_.has(newSpot.photos[0].user.languages, language.$id)) return;\n            vm.markers.push(newSpot);\n            keepGoing = false;\n          });\n        });\n      });\n    }\n\n    function getLanguages() {\n      language.getAll().$loaded().then(function (languages) {\n        vm.languages = languages;\n        angular.forEach(languages, function (language) {\n          language.checked = true;\n        });\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.spots').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('spots', {\n        url: '/',\n        controller: 'SpotsController',\n        controllerAs: 'spots',\n        templateUrl: 'app/spots/spots.html',\n        resolve: {\n          currentAuth: ['auth', function (auth) {\n            return auth.firebase.$waitForAuth();\n          }]\n        }\n      });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('TicketsAddController', TicketsAddController);\n\n  TicketsAddController.$inject = ['$state', 'ticket'];\n\n  function TicketsAddController($state, ticket) {\n    var vm = this;\n    vm.add = add;\n\n    activate();\n\n    function activate() {}\n\n    function add() {\n      ticket.$add({\n        departureDate: vm.departureDate,\n        arrivedDate: vm.arrivedDate,\n        destination: vm.destination,\n        languages: vm.languages,\n        message: vm.message\n      }).then(function () {\n        $state.go('tickets');\n      });\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('TicketsController', TicketsController);\n\n  TicketsController.$inject = ['ticket'];\n\n  function TicketsController(ticket) {\n    var vm = this;\n    vm.tickets = [];\n\n    activate();\n\n    function activate() {\n      vm.tickets = ticket;\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.tickets').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('tickets', {\n        url: '/tickets',\n        controller: 'TicketsController',\n        controllerAs: 'tickets',\n        templateUrl: 'app/tickets/tickets.html',\n        resolve: {\n          currentAuth: ['auth', function(auth) {\n            return auth.$requireAuth();\n          }]\n        }\n      })\n      .state('tickets.add', {\n        url: '/add',\n        views: {\n          \"@\": {\n            controller: 'TicketsAddController',\n            controllerAs: 'ticketsAdd',\n            templateUrl: 'app/tickets/tickets-add.html'\n          }\n        },\n        resolve: {\n          currentAuth: ['auth', function(auth) {\n            return auth.$requireAuth();\n          }]\n        }\n      });\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app').controller('HomeController', HomeController);\n\n  HomeController.$inject = ['$scope', '$state', 'currentAuth', 'toastr', 'user'];\n\n  function HomeController($scope, $state, currentAuth, toastr, user) {\n\n    var vm = this;\n    vm.me = currentAuth;\n\n    activate();\n\n    function activate() {\n      $scope.$on('$stateChangeSuccess', checkUserData);\n      getFavorites();\n    }\n\n    function checkUserData() {\n      user.get(currentAuth.uid).$loaded().then(function (userData) {\n        if (_.isUndefined(userData.name) || _.isUndefined(userData.email)) {\n          toastr.warning('Please input your Username and Email.', 'Sorry, we can\\'t get Email.');\n          return $state.go('account');\n        }\n      });\n    }\n\n    function getFavorites() {\n      // console.log(user.get(currentAuth.uid));\n      // user.get(currentAuth)\n    }\n  }\n})();\n","(function () {\n  'use strict';\n\n  angular.module('app.home').config(route);\n\n  route.$inject = ['$stateProvider'];\n\n  function route($stateProvider) {\n    $stateProvider\n      .state('home', {\n        url: '/home',\n        controller: 'HomeController',\n        controllerAs: 'home',\n        templateUrl: 'app/home/home.html',\n        resolve: {\n          currentAuth: ['auth', function (auth) {\n            return auth.firebase.$requireAuth();\n          }]\n        }\n      });\n  }\n})();\n"],"sourceRoot":"/source/"}